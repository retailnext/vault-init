---
name: CI
on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
permissions:
  contents: read
  packages: write
env:
  # renovate: datasource=github-releases depName=golangci/golangci-lint versioning=semver-coerced
  GOLANGCI_LINT_VERSION: "v1.64.8"
  IMAGE_NAME: "${{ github.repository }}"
  TAG: "ghcr.io/${{ github.repository }}:latest"
  TEST_PARAMS: "--vault-addr localhost:1234 --initout file:/secret_out.txt --dry-run"
  REGISTRY: "ghcr.io"
jobs:
  go:
    name: Go
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4
      - name: Set up Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5
        with:
          go-version-file: 'go.mod'
      - name: golangci-lint
        uses: golangci/golangci-lint-action@55c2c1448f86e01eaae002a5a3a9624417608d84 # v6
        with:
          version: ${{ env.GOLANGCI_LINT_VERSION }}
          args: --timeout=10m
      - name: go test
        run: |
          go test -v ./...
      - name: run vault-init
        run: |
          go build -o vault-init .
          ./vault-init ${{ env.TEST_PARAMS }}
  docker:
    name: Docker Build vault-init
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3
      - name: Log in to the Container registry
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build test image
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6
        with:
          context: .
          push: false
          load: true
          tags: ${{ env.TAG }}
          cache-from: type=gha
      - name: Test image
        run: |
          docker run --rm ${{ env.TAG }} ${{ env.TEST_PARAMS }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=pr
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}
      - name: Build images
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
